
bin\Debug\144105_WiperCaseStudy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000648  000006fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000648  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800106  00800106  00000702  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000702  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000000e0  00000000  00000000  00000705  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000021c  00000000  00000000  000007e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000711  00000000  00000000  00000a01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000405  00000000  00000000  00001112  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000084e  00000000  00000000  00001517  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00001d68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000290  00000000  00000000  00001f18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 33 01 	jmp	0x266	; 0x266 <__vector_1>
   8:	0c 94 4c 01 	jmp	0x298	; 0x298 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 65 01 	call	0x2ca	; 0x2ca <main>
  9e:	0c 94 22 03 	jmp	0x644	; 0x644 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Config>:
* Description:  enable adc and set ref voltage vcc=5v and adc channel to ADC0
* Arguments: none
* Returns: None
******************************************************************************/
void ADC_Config(void)
{
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	0f 92       	push	r0
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
    ADMUX &= 0x00;
  b0:	ec e7       	ldi	r30, 0x7C	; 124
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	ec e7       	ldi	r30, 0x7C	; 124
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	10 82       	st	Z, r1
    ADMUX |= (1 << REFS0);
  bc:	ac e7       	ldi	r26, 0x7C	; 124
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	ec e7       	ldi	r30, 0x7C	; 124
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	8c 93       	st	X, r24
    ADCSRA |= (1 << ADEN); //enables the ADC
  ca:	aa e7       	ldi	r26, 0x7A	; 122
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 68       	ori	r24, 0x80	; 128
  d6:	8c 93       	st	X, r24
}
  d8:	0f 90       	pop	r0
  da:	cf 91       	pop	r28
  dc:	df 91       	pop	r29
  de:	08 95       	ret

000000e0 <ADC_Read>:
        the adc value.
* Arguments: none
* Returns: none
******************************************************************************/
void ADC_Read(void)
{
  e0:	df 93       	push	r29
  e2:	cf 93       	push	r28
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
    ADCSRA |= (1 << ADSC);   //start of converion
  e8:	aa e7       	ldi	r26, 0x7A	; 122
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	ea e7       	ldi	r30, 0x7A	; 122
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	8c 93       	st	X, r24
    while (ADCSRA & (1 << ADSC)); //wait for conversion complete
  f6:	ea e7       	ldi	r30, 0x7A	; 122
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	88 2f       	mov	r24, r24
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	80 74       	andi	r24, 0x40	; 64
 102:	90 70       	andi	r25, 0x00	; 0
 104:	00 97       	sbiw	r24, 0x00	; 0
 106:	b9 f7       	brne	.-18     	; 0xf6 <ADC_Read+0x16>
    g_ADC_Value=ADC; //update global ADC value
 108:	e8 e7       	ldi	r30, 0x78	; 120
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	91 81       	ldd	r25, Z+1	; 0x01
 110:	90 93 07 01 	sts	0x0107, r25
 114:	80 93 06 01 	sts	0x0106, r24
}
 118:	cf 91       	pop	r28
 11a:	df 91       	pop	r29
 11c:	08 95       	ret

0000011e <Stop>:
* Description:  stop the adc conversion
* Arguments: none
* Returns: none
******************************************************************************/
void Stop(void)
{
 11e:	df 93       	push	r29
 120:	cf 93       	push	r28
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
    ADCSRA &= ~(1 << ADEN);
 126:	aa e7       	ldi	r26, 0x7A	; 122
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	ea e7       	ldi	r30, 0x7A	; 122
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8f 77       	andi	r24, 0x7F	; 127
 132:	8c 93       	st	X, r24

}
 134:	cf 91       	pop	r28
 136:	df 91       	pop	r29
 138:	08 95       	ret

0000013a <GPIOConfig>:
* Description:  Configures the mode of the pin as INPUT and output
* Arguments: pin and mode
* Returns: None
******************************************************************************/
void GPIOConfig(uint8_t Pin,uint8_t Mode)
{
 13a:	df 93       	push	r29
 13c:	cf 93       	push	r28
 13e:	00 d0       	rcall	.+0      	; 0x140 <GPIOConfig+0x6>
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	89 83       	std	Y+1, r24	; 0x01
 146:	6a 83       	std	Y+2, r22	; 0x02
  if(Mode)
 148:	8a 81       	ldd	r24, Y+2	; 0x02
 14a:	88 23       	and	r24, r24
 14c:	39 f1       	breq	.+78     	; 0x19c <GPIOConfig+0x62>
    {
        DDRD|=(1<<Pin);
 14e:	aa e2       	ldi	r26, 0x2A	; 42
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	ea e2       	ldi	r30, 0x2A	; 42
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	48 2f       	mov	r20, r24
 15a:	89 81       	ldd	r24, Y+1	; 0x01
 15c:	28 2f       	mov	r18, r24
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <GPIOConfig+0x30>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	2a 95       	dec	r18
 16c:	e2 f7       	brpl	.-8      	; 0x166 <GPIOConfig+0x2c>
 16e:	84 2b       	or	r24, r20
 170:	8c 93       	st	X, r24
        PORTD&=~(1<<Pin);
 172:	ab e2       	ldi	r26, 0x2B	; 43
 174:	b0 e0       	ldi	r27, 0x00	; 0
 176:	eb e2       	ldi	r30, 0x2B	; 43
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	48 2f       	mov	r20, r24
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	28 2f       	mov	r18, r24
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 2e       	mov	r0, r18
 18a:	02 c0       	rjmp	.+4      	; 0x190 <GPIOConfig+0x56>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	0a 94       	dec	r0
 192:	e2 f7       	brpl	.-8      	; 0x18c <GPIOConfig+0x52>
 194:	80 95       	com	r24
 196:	84 23       	and	r24, r20
 198:	8c 93       	st	X, r24
 19a:	26 c0       	rjmp	.+76     	; 0x1e8 <GPIOConfig+0xae>
    }
  else
    {
        DDRD&=~(1<<Pin);
 19c:	aa e2       	ldi	r26, 0x2A	; 42
 19e:	b0 e0       	ldi	r27, 0x00	; 0
 1a0:	ea e2       	ldi	r30, 0x2A	; 42
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	48 2f       	mov	r20, r24
 1a8:	89 81       	ldd	r24, Y+1	; 0x01
 1aa:	28 2f       	mov	r18, r24
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <GPIOConfig+0x7e>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	2a 95       	dec	r18
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <GPIOConfig+0x7a>
 1bc:	80 95       	com	r24
 1be:	84 23       	and	r24, r20
 1c0:	8c 93       	st	X, r24
        PORTD|=(1<<Pin);
 1c2:	ab e2       	ldi	r26, 0x2B	; 43
 1c4:	b0 e0       	ldi	r27, 0x00	; 0
 1c6:	eb e2       	ldi	r30, 0x2B	; 43
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	48 2f       	mov	r20, r24
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	28 2f       	mov	r18, r24
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	02 2e       	mov	r0, r18
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <GPIOConfig+0xa6>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	0a 94       	dec	r0
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <GPIOConfig+0xa2>
 1e4:	84 2b       	or	r24, r20
 1e6:	8c 93       	st	X, r24
    }
}
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	cf 91       	pop	r28
 1ee:	df 91       	pop	r29
 1f0:	08 95       	ret

000001f2 <Int0Config>:
* Description:  Configures the mode external interrupt INT0
* Arguments: None
* Returns: None
******************************************************************************/
void Int0Config(void)
{
 1f2:	df 93       	push	r29
 1f4:	cf 93       	push	r28
 1f6:	cd b7       	in	r28, 0x3d	; 61
 1f8:	de b7       	in	r29, 0x3e	; 62
    EICRA |= (1 << ISC00);
 1fa:	a9 e6       	ldi	r26, 0x69	; 105
 1fc:	b0 e0       	ldi	r27, 0x00	; 0
 1fe:	e9 e6       	ldi	r30, 0x69	; 105
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	81 60       	ori	r24, 0x01	; 1
 206:	8c 93       	st	X, r24
    EICRA &= ~(1 << ISC01); //Any logical change generates an interrupt request
 208:	a9 e6       	ldi	r26, 0x69	; 105
 20a:	b0 e0       	ldi	r27, 0x00	; 0
 20c:	e9 e6       	ldi	r30, 0x69	; 105
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	8d 7f       	andi	r24, 0xFD	; 253
 214:	8c 93       	st	X, r24
    EIMSK |= (1 << INT0);   //Local Interrupt enable
 216:	ad e3       	ldi	r26, 0x3D	; 61
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	ed e3       	ldi	r30, 0x3D	; 61
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	81 60       	ori	r24, 0x01	; 1
 222:	8c 93       	st	X, r24
    sei();                  //enable global interrupt
 224:	78 94       	sei
}
 226:	cf 91       	pop	r28
 228:	df 91       	pop	r29
 22a:	08 95       	ret

0000022c <Int1Config>:
* Description:  Configures the mode external interrupt INT1
* Arguments: None
* Returns: None
******************************************************************************/
void Int1Config(void)
{
 22c:	df 93       	push	r29
 22e:	cf 93       	push	r28
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62
    EICRA |= (1 << ISC10);
 234:	a9 e6       	ldi	r26, 0x69	; 105
 236:	b0 e0       	ldi	r27, 0x00	; 0
 238:	e9 e6       	ldi	r30, 0x69	; 105
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	84 60       	ori	r24, 0x04	; 4
 240:	8c 93       	st	X, r24
    EICRA &= ~(1 << ISC11); //Any logical change generates an interrupt request
 242:	a9 e6       	ldi	r26, 0x69	; 105
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	e9 e6       	ldi	r30, 0x69	; 105
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	87 7f       	andi	r24, 0xF7	; 247
 24e:	8c 93       	st	X, r24
    EIMSK |= (1 << INT1);   //Local Interrupt enable
 250:	ad e3       	ldi	r26, 0x3D	; 61
 252:	b0 e0       	ldi	r27, 0x00	; 0
 254:	ed e3       	ldi	r30, 0x3D	; 61
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	82 60       	ori	r24, 0x02	; 2
 25c:	8c 93       	st	X, r24
    sei();                  //enable global interrupt
 25e:	78 94       	sei
}
 260:	cf 91       	pop	r28
 262:	df 91       	pop	r29
 264:	08 95       	ret

00000266 <__vector_1>:
/******************************************************************************
* Name:INT0
* Description:When INT0 interrupt occurred it set INT0 flag to 1
******************************************************************************/
ISR(INT0_vect)
{
 266:	1f 92       	push	r1
 268:	0f 92       	push	r0
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	0f 92       	push	r0
 26e:	11 24       	eor	r1, r1
 270:	8f 93       	push	r24
 272:	df 93       	push	r29
 274:	cf 93       	push	r28
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
    cli();
 27a:	f8 94       	cli
    g_Ext_Int_Flag.flag_Int0 = 1;
 27c:	80 91 08 01 	lds	r24, 0x0108
 280:	81 60       	ori	r24, 0x01	; 1
 282:	80 93 08 01 	sts	0x0108, r24
    sei();
 286:	78 94       	sei
}
 288:	cf 91       	pop	r28
 28a:	df 91       	pop	r29
 28c:	8f 91       	pop	r24
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <__vector_2>:
/******************************************************************************
* Name:INT2
* Description:When INT1 interrupt occurred it set INT1 flag to 1
******************************************************************************/
ISR(INT1_vect)
{
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	8f 93       	push	r24
 2a4:	df 93       	push	r29
 2a6:	cf 93       	push	r28
 2a8:	cd b7       	in	r28, 0x3d	; 61
 2aa:	de b7       	in	r29, 0x3e	; 62
    cli();
 2ac:	f8 94       	cli
    g_Ext_Int_Flag.flag_Int1 = 1;
 2ae:	80 91 08 01 	lds	r24, 0x0108
 2b2:	82 60       	ori	r24, 0x02	; 2
 2b4:	80 93 08 01 	sts	0x0108, r24
    sei();
 2b8:	78 94       	sei
}
 2ba:	cf 91       	pop	r28
 2bc:	df 91       	pop	r29
 2be:	8f 91       	pop	r24
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <main>:
#include "MODE.h"
/******************************************************************************
*                      Main functions
******************************************************************************/
int main(void)
{
 2ca:	df 93       	push	r29
 2cc:	cf 93       	push	r28
 2ce:	cd b7       	in	r28, 0x3d	; 61
 2d0:	de b7       	in	r29, 0x3e	; 62
    IO_Config();
 2d2:	0e 94 70 01 	call	0x2e0	; 0x2e0 <IO_Config>
    while(1)   //Super Loop
    {
        Engine_offMode();
 2d6:	0e 94 87 01 	call	0x30e	; 0x30e <Engine_offMode>
        Engine_onMode();
 2da:	0e 94 9e 01 	call	0x33c	; 0x33c <Engine_onMode>
 2de:	fb cf       	rjmp	.-10     	; 0x2d6 <main+0xc>

000002e0 <IO_Config>:
* Description:  Implement the wiper input and output
* Arguments: None
* Returns: None
******************************************************************************/
void IO_Config(void)
{
 2e0:	df 93       	push	r29
 2e2:	cf 93       	push	r28
 2e4:	cd b7       	in	r28, 0x3d	; 61
 2e6:	de b7       	in	r29, 0x3e	; 62
    GPIOConfig(PD2,INPUT);
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	0e 94 9d 00 	call	0x13a	; 0x13a <GPIOConfig>
    GPIOConfig(PD3,INPUT);
 2f0:	83 e0       	ldi	r24, 0x03	; 3
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	0e 94 9d 00 	call	0x13a	; 0x13a <GPIOConfig>
    GPIOConfig(PD6,OUTPUT);
 2f8:	86 e0       	ldi	r24, 0x06	; 6
 2fa:	61 e0       	ldi	r22, 0x01	; 1
 2fc:	0e 94 9d 00 	call	0x13a	; 0x13a <GPIOConfig>
    Int0Config();
 300:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Int0Config>
    Int1Config();
 304:	0e 94 16 01 	call	0x22c	; 0x22c <Int1Config>
}
 308:	cf 91       	pop	r28
 30a:	df 91       	pop	r29
 30c:	08 95       	ret

0000030e <Engine_offMode>:
* Description: Implement engine OFF mode functionality
* Arguments: None
* Returns: None
******************************************************************************/
void Engine_offMode(void)
{
 30e:	df 93       	push	r29
 310:	cf 93       	push	r28
 312:	cd b7       	in	r28, 0x3d	; 61
 314:	de b7       	in	r29, 0x3e	; 62
 316:	05 c0       	rjmp	.+10     	; 0x322 <Engine_offMode+0x14>
    while(0==g_Ext_Int_Flag.flag_Int0)
    {
        g_Ext_Int_Flag.flag_Int1=0;
 318:	80 91 08 01 	lds	r24, 0x0108
 31c:	8d 7f       	andi	r24, 0xFD	; 253
 31e:	80 93 08 01 	sts	0x0108, r24
* Arguments: None
* Returns: None
******************************************************************************/
void Engine_offMode(void)
{
    while(0==g_Ext_Int_Flag.flag_Int0)
 322:	80 91 08 01 	lds	r24, 0x0108
 326:	81 70       	andi	r24, 0x01	; 1
 328:	88 23       	and	r24, r24
 32a:	b1 f3       	breq	.-20     	; 0x318 <Engine_offMode+0xa>
    {
        g_Ext_Int_Flag.flag_Int1=0;
    }
    g_Ext_Int_Flag.flag_Int0=0;
 32c:	80 91 08 01 	lds	r24, 0x0108
 330:	8e 7f       	andi	r24, 0xFE	; 254
 332:	80 93 08 01 	sts	0x0108, r24
}
 336:	cf 91       	pop	r28
 338:	df 91       	pop	r29
 33a:	08 95       	ret

0000033c <Engine_onMode>:
* Description: Implement engine ON mode functionality
* Arguments: None
* Returns: None
******************************************************************************/
void Engine_onMode(void)
{
 33c:	df 93       	push	r29
 33e:	cf 93       	push	r28
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
 344:	09 c0       	rjmp	.+18     	; 0x358 <Engine_onMode+0x1c>

    while(0==g_Ext_Int_Flag.flag_Int0)
    {
        Wiper_ManualMode();
 346:	0e 94 04 03 	call	0x608	; 0x608 <Wiper_ManualMode>
        if(1==g_Ext_Int_Flag.flag_Int0)
 34a:	80 91 08 01 	lds	r24, 0x0108
 34e:	81 70       	andi	r24, 0x01	; 1
 350:	88 23       	and	r24, r24
 352:	39 f4       	brne	.+14     	; 0x362 <Engine_onMode+0x26>
        {
            break;
        }
        Wiper_AutoMode();
 354:	0e 94 cd 02 	call	0x59a	; 0x59a <Wiper_AutoMode>
* Returns: None
******************************************************************************/
void Engine_onMode(void)
{

    while(0==g_Ext_Int_Flag.flag_Int0)
 358:	80 91 08 01 	lds	r24, 0x0108
 35c:	81 70       	andi	r24, 0x01	; 1
 35e:	88 23       	and	r24, r24
 360:	91 f3       	breq	.-28     	; 0x346 <Engine_onMode+0xa>
        {
            break;
        }
        Wiper_AutoMode();
    }
    g_Ext_Int_Flag.flag_Int0=0;
 362:	80 91 08 01 	lds	r24, 0x0108
 366:	8e 7f       	andi	r24, 0xFE	; 254
 368:	80 93 08 01 	sts	0x0108, r24
}
 36c:	cf 91       	pop	r28
 36e:	df 91       	pop	r29
 370:	08 95       	ret

00000372 <Timer0Config>:
* Description:  Configures the timer 0 in pwm mode
* Arguments: None
* Returns: None
******************************************************************************/
void Timer0Config(void)
{
 372:	df 93       	push	r29
 374:	cf 93       	push	r28
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62
    TCCR0A |= ((1 << WGM01) | (1 << WGM00));
 37a:	a4 e4       	ldi	r26, 0x44	; 68
 37c:	b0 e0       	ldi	r27, 0x00	; 0
 37e:	e4 e4       	ldi	r30, 0x44	; 68
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	83 60       	ori	r24, 0x03	; 3
 386:	8c 93       	st	X, r24
    TCCR0A |= (1 << COM0A1);    //COM0A1=1
 388:	a4 e4       	ldi	r26, 0x44	; 68
 38a:	b0 e0       	ldi	r27, 0x00	; 0
 38c:	e4 e4       	ldi	r30, 0x44	; 68
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	80 81       	ld	r24, Z
 392:	80 68       	ori	r24, 0x80	; 128
 394:	8c 93       	st	X, r24
    TCCR0B |= ((1 << CS00) | (1 << CS02));
 396:	a5 e4       	ldi	r26, 0x45	; 69
 398:	b0 e0       	ldi	r27, 0x00	; 0
 39a:	e5 e4       	ldi	r30, 0x45	; 69
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	80 81       	ld	r24, Z
 3a0:	85 60       	ori	r24, 0x05	; 5
 3a2:	8c 93       	st	X, r24
    TCCR0B &= ~(1 << CS01);     //CS02=CS00=1
 3a4:	a5 e4       	ldi	r26, 0x45	; 69
 3a6:	b0 e0       	ldi	r27, 0x00	; 0
 3a8:	e5 e4       	ldi	r30, 0x45	; 69
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	8d 7f       	andi	r24, 0xFD	; 253
 3b0:	8c 93       	st	X, r24
    OCR0A=g_Update_ocr0a;
 3b2:	e7 e4       	ldi	r30, 0x47	; 71
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 91 0a 01 	lds	r24, 0x010A
 3ba:	80 83       	st	Z, r24
    sei();
 3bc:	78 94       	sei
}
 3be:	cf 91       	pop	r28
 3c0:	df 91       	pop	r29
 3c2:	08 95       	ret

000003c4 <Timer2Config>:
* Description:  Configures the timer2 in normal mode with prescaler clk/1024
* Arguments: None
* Returns: None
******************************************************************************/
void Timer2Config(void)
{
 3c4:	df 93       	push	r29
 3c6:	cf 93       	push	r28
 3c8:	cd b7       	in	r28, 0x3d	; 61
 3ca:	de b7       	in	r29, 0x3e	; 62
    TCCR2A=0x00;                             // Normal mode of operation
 3cc:	e0 eb       	ldi	r30, 0xB0	; 176
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	10 82       	st	Z, r1
    TCCR2B|=((1<<CS22)|(1<<CS21)|(1<<CS20));
 3d2:	a1 eb       	ldi	r26, 0xB1	; 177
 3d4:	b0 e0       	ldi	r27, 0x00	; 0
 3d6:	e1 eb       	ldi	r30, 0xB1	; 177
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	87 60       	ori	r24, 0x07	; 7
 3de:	8c 93       	st	X, r24
    TIMSK2|=(1<<TOIE2);                 // INT enable
 3e0:	a0 e7       	ldi	r26, 0x70	; 112
 3e2:	b0 e0       	ldi	r27, 0x00	; 0
 3e4:	e0 e7       	ldi	r30, 0x70	; 112
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	81 60       	ori	r24, 0x01	; 1
 3ec:	8c 93       	st	X, r24
    sei();
 3ee:	78 94       	sei
}
 3f0:	cf 91       	pop	r28
 3f2:	df 91       	pop	r29
 3f4:	08 95       	ret

000003f6 <Stop_Timer0>:
* Description: Configures the to stop the pwm operation and reset all register
* Arguments: None
* Returns: None
******************************************************************************/
void Stop_Timer0(void)
{
 3f6:	df 93       	push	r29
 3f8:	cf 93       	push	r28
 3fa:	cd b7       	in	r28, 0x3d	; 61
 3fc:	de b7       	in	r29, 0x3e	; 62
    ////Clearing timer 0 register to stop timer 0
    TCCR0A &= ~((1 << WGM01) | (1 << WGM00));
 3fe:	a4 e4       	ldi	r26, 0x44	; 68
 400:	b0 e0       	ldi	r27, 0x00	; 0
 402:	e4 e4       	ldi	r30, 0x44	; 68
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	8c 7f       	andi	r24, 0xFC	; 252
 40a:	8c 93       	st	X, r24
    TCCR0A &= ~(1 << COM0A1);
 40c:	a4 e4       	ldi	r26, 0x44	; 68
 40e:	b0 e0       	ldi	r27, 0x00	; 0
 410:	e4 e4       	ldi	r30, 0x44	; 68
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	8f 77       	andi	r24, 0x7F	; 127
 418:	8c 93       	st	X, r24
    TCCR0A &= ~(1 << COM0A0);
 41a:	a4 e4       	ldi	r26, 0x44	; 68
 41c:	b0 e0       	ldi	r27, 0x00	; 0
 41e:	e4 e4       	ldi	r30, 0x44	; 68
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	8f 7b       	andi	r24, 0xBF	; 191
 426:	8c 93       	st	X, r24
    TCCR0B &= ~((1 << CS00) | (1 << CS02));
 428:	a5 e4       	ldi	r26, 0x45	; 69
 42a:	b0 e0       	ldi	r27, 0x00	; 0
 42c:	e5 e4       	ldi	r30, 0x45	; 69
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	80 81       	ld	r24, Z
 432:	8a 7f       	andi	r24, 0xFA	; 250
 434:	8c 93       	st	X, r24
    TCCR0B &= ~(1 << CS01);
 436:	a5 e4       	ldi	r26, 0x45	; 69
 438:	b0 e0       	ldi	r27, 0x00	; 0
 43a:	e5 e4       	ldi	r30, 0x45	; 69
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	80 81       	ld	r24, Z
 440:	8d 7f       	andi	r24, 0xFD	; 253
 442:	8c 93       	st	X, r24
}
 444:	cf 91       	pop	r28
 446:	df 91       	pop	r29
 448:	08 95       	ret

0000044a <Stop_Timer2>:
* Description:  Configures the timer2 to stop normal mode operation be reset register
* Arguments: None
* Returns: None
******************************************************************************/
void Stop_Timer2(void)
{
 44a:	df 93       	push	r29
 44c:	cf 93       	push	r28
 44e:	cd b7       	in	r28, 0x3d	; 61
 450:	de b7       	in	r29, 0x3e	; 62
    TCCR2A=0x00;   ////Clearing timer 2 register to stop timer 2
 452:	e0 eb       	ldi	r30, 0xB0	; 176
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	10 82       	st	Z, r1
    TCCR2B&=~((1<<CS22)|(1<<CS21)|(1<<CS20));
 458:	a1 eb       	ldi	r26, 0xB1	; 177
 45a:	b0 e0       	ldi	r27, 0x00	; 0
 45c:	e1 eb       	ldi	r30, 0xB1	; 177
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	80 81       	ld	r24, Z
 462:	88 7f       	andi	r24, 0xF8	; 248
 464:	8c 93       	st	X, r24
    TIMSK2&=~(1<<TOIE2); //disable timer 0 interrupt
 466:	a0 e7       	ldi	r26, 0x70	; 112
 468:	b0 e0       	ldi	r27, 0x00	; 0
 46a:	e0 e7       	ldi	r30, 0x70	; 112
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	80 81       	ld	r24, Z
 470:	8e 7f       	andi	r24, 0xFE	; 254
 472:	8c 93       	st	X, r24
}
 474:	cf 91       	pop	r28
 476:	df 91       	pop	r29
 478:	08 95       	ret

0000047a <__vector_9>:
******************************************************************************/
/******************************************************************************
* Name:Timer 2 overflow
* Description:Timer overflow set timer 2 flag after each 2 sec
******************************************************************************/
ISR(TIMER2_OVF_vect){
 47a:	1f 92       	push	r1
 47c:	0f 92       	push	r0
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	0f 92       	push	r0
 482:	11 24       	eor	r1, r1
 484:	2f 93       	push	r18
 486:	8f 93       	push	r24
 488:	9f 93       	push	r25
 48a:	df 93       	push	r29
 48c:	cf 93       	push	r28
 48e:	cd b7       	in	r28, 0x3d	; 61
 490:	de b7       	in	r29, 0x3e	; 62
    static uint16_t counter;
    cli();
 492:	f8 94       	cli
    counter++;
 494:	80 91 0b 01 	lds	r24, 0x010B
 498:	90 91 0c 01 	lds	r25, 0x010C
 49c:	01 96       	adiw	r24, 0x01	; 1
 49e:	90 93 0c 01 	sts	0x010C, r25
 4a2:	80 93 0b 01 	sts	0x010B, r24
    if (counter >= 306)
 4a6:	80 91 0b 01 	lds	r24, 0x010B
 4aa:	90 91 0c 01 	lds	r25, 0x010C
 4ae:	21 e0       	ldi	r18, 0x01	; 1
 4b0:	82 33       	cpi	r24, 0x32	; 50
 4b2:	92 07       	cpc	r25, r18
 4b4:	48 f0       	brcs	.+18     	; 0x4c8 <__vector_9+0x4e>
    {
        g_Timer2_Flag.Overflow_Flag= 1;
 4b6:	80 91 09 01 	lds	r24, 0x0109
 4ba:	81 60       	ori	r24, 0x01	; 1
 4bc:	80 93 09 01 	sts	0x0109, r24
        counter = 0;
 4c0:	10 92 0c 01 	sts	0x010C, r1
 4c4:	10 92 0b 01 	sts	0x010B, r1
    }
    sei();
 4c8:	78 94       	sei
}
 4ca:	cf 91       	pop	r28
 4cc:	df 91       	pop	r29
 4ce:	9f 91       	pop	r25
 4d0:	8f 91       	pop	r24
 4d2:	2f 91       	pop	r18
 4d4:	0f 90       	pop	r0
 4d6:	0f be       	out	0x3f, r0	; 63
 4d8:	0f 90       	pop	r0
 4da:	1f 90       	pop	r1
 4dc:	18 95       	reti

000004de <Read_RainSensor>:
* Description:  read rain sensor
* Arguments: None
* Returns: Intensity_of_Rain
******************************************************************************/
Intensity_of_Rain Read_RainSensor(void)
{
 4de:	df 93       	push	r29
 4e0:	cf 93       	push	r28
 4e2:	00 d0       	rcall	.+0      	; 0x4e4 <Read_RainSensor+0x6>
 4e4:	cd b7       	in	r28, 0x3d	; 61
 4e6:	de b7       	in	r29, 0x3e	; 62
  ADC_Read();
 4e8:	0e 94 70 00 	call	0xe0	; 0xe0 <ADC_Read>
  if((0<g_ADC_Value) && (g_ADC_Value<=50))
 4ec:	80 91 06 01 	lds	r24, 0x0106
 4f0:	90 91 07 01 	lds	r25, 0x0107
 4f4:	00 97       	sbiw	r24, 0x00	; 0
 4f6:	51 f0       	breq	.+20     	; 0x50c <Read_RainSensor+0x2e>
 4f8:	80 91 06 01 	lds	r24, 0x0106
 4fc:	90 91 07 01 	lds	r25, 0x0107
 500:	83 33       	cpi	r24, 0x33	; 51
 502:	91 05       	cpc	r25, r1
 504:	18 f4       	brcc	.+6      	; 0x50c <Read_RainSensor+0x2e>
  {
      return No_rain;
 506:	1a 82       	std	Y+2, r1	; 0x02
 508:	19 82       	std	Y+1, r1	; 0x01
 50a:	40 c0       	rjmp	.+128    	; 0x58c <Read_RainSensor+0xae>
  }
  else if((50<g_ADC_Value) && (g_ADC_Value<=200))
 50c:	80 91 06 01 	lds	r24, 0x0106
 510:	90 91 07 01 	lds	r25, 0x0107
 514:	83 33       	cpi	r24, 0x33	; 51
 516:	91 05       	cpc	r25, r1
 518:	60 f0       	brcs	.+24     	; 0x532 <Read_RainSensor+0x54>
 51a:	80 91 06 01 	lds	r24, 0x0106
 51e:	90 91 07 01 	lds	r25, 0x0107
 522:	89 3c       	cpi	r24, 0xC9	; 201
 524:	91 05       	cpc	r25, r1
 526:	28 f4       	brcc	.+10     	; 0x532 <Read_RainSensor+0x54>
  {
      return Low_rain;
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	9a 83       	std	Y+2, r25	; 0x02
 52e:	89 83       	std	Y+1, r24	; 0x01
 530:	2d c0       	rjmp	.+90     	; 0x58c <Read_RainSensor+0xae>
  }
  else if((200<g_ADC_Value) && (g_ADC_Value<=500))
 532:	80 91 06 01 	lds	r24, 0x0106
 536:	90 91 07 01 	lds	r25, 0x0107
 53a:	89 3c       	cpi	r24, 0xC9	; 201
 53c:	91 05       	cpc	r25, r1
 53e:	68 f0       	brcs	.+26     	; 0x55a <Read_RainSensor+0x7c>
 540:	80 91 06 01 	lds	r24, 0x0106
 544:	90 91 07 01 	lds	r25, 0x0107
 548:	21 e0       	ldi	r18, 0x01	; 1
 54a:	85 3f       	cpi	r24, 0xF5	; 245
 54c:	92 07       	cpc	r25, r18
 54e:	28 f4       	brcc	.+10     	; 0x55a <Read_RainSensor+0x7c>
  {
      return Medium_rain;
 550:	82 e0       	ldi	r24, 0x02	; 2
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	9a 83       	std	Y+2, r25	; 0x02
 556:	89 83       	std	Y+1, r24	; 0x01
 558:	19 c0       	rjmp	.+50     	; 0x58c <Read_RainSensor+0xae>
  }
  else if((500<g_ADC_Value) && (g_ADC_Value<=1000))
 55a:	80 91 06 01 	lds	r24, 0x0106
 55e:	90 91 07 01 	lds	r25, 0x0107
 562:	21 e0       	ldi	r18, 0x01	; 1
 564:	85 3f       	cpi	r24, 0xF5	; 245
 566:	92 07       	cpc	r25, r18
 568:	68 f0       	brcs	.+26     	; 0x584 <Read_RainSensor+0xa6>
 56a:	80 91 06 01 	lds	r24, 0x0106
 56e:	90 91 07 01 	lds	r25, 0x0107
 572:	23 e0       	ldi	r18, 0x03	; 3
 574:	89 3e       	cpi	r24, 0xE9	; 233
 576:	92 07       	cpc	r25, r18
 578:	28 f4       	brcc	.+10     	; 0x584 <Read_RainSensor+0xa6>
  {
      return High_rain;
 57a:	83 e0       	ldi	r24, 0x03	; 3
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	9a 83       	std	Y+2, r25	; 0x02
 580:	89 83       	std	Y+1, r24	; 0x01
 582:	04 c0       	rjmp	.+8      	; 0x58c <Read_RainSensor+0xae>
  }
  else
  {
      return Very_high_rain;
 584:	84 e0       	ldi	r24, 0x04	; 4
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	9a 83       	std	Y+2, r25	; 0x02
 58a:	89 83       	std	Y+1, r24	; 0x01
 58c:	89 81       	ldd	r24, Y+1	; 0x01
 58e:	9a 81       	ldd	r25, Y+2	; 0x02
  }
}
 590:	0f 90       	pop	r0
 592:	0f 90       	pop	r0
 594:	cf 91       	pop	r28
 596:	df 91       	pop	r29
 598:	08 95       	ret

0000059a <Wiper_AutoMode>:
* Description:  Implement the wiper auto mode functionality
* Arguments: None
* Returns: None
******************************************************************************/
void Wiper_AutoMode(void)
{
 59a:	df 93       	push	r29
 59c:	cf 93       	push	r28
 59e:	cd b7       	in	r28, 0x3d	; 61
 5a0:	de b7       	in	r29, 0x3e	; 62
    ADC_Config();
 5a2:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Config>
    Timer0Config();
 5a6:	0e 94 b9 01 	call	0x372	; 0x372 <Timer0Config>
    Timer2Config();
 5aa:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Timer2Config>
 5ae:	14 c0       	rjmp	.+40     	; 0x5d8 <Wiper_AutoMode+0x3e>
    while ((0==g_Ext_Int_Flag.flag_Int0)&&(0==g_Ext_Int_Flag.flag_Int1))
        {
            if(1==g_Timer2_Flag.Overflow_Flag)
 5b0:	80 91 09 01 	lds	r24, 0x0109
 5b4:	81 70       	andi	r24, 0x01	; 1
 5b6:	88 23       	and	r24, r24
 5b8:	79 f0       	breq	.+30     	; 0x5d8 <Wiper_AutoMode+0x3e>
            {
                g_Update_ocr0a=g_DutyCycle[Read_RainSensor()];
 5ba:	0e 94 6f 02 	call	0x4de	; 0x4de <Read_RainSensor>
 5be:	fc 01       	movw	r30, r24
 5c0:	e0 50       	subi	r30, 0x00	; 0
 5c2:	ff 4f       	sbci	r31, 0xFF	; 255
 5c4:	80 81       	ld	r24, Z
 5c6:	80 93 0a 01 	sts	0x010A, r24
                Timer0Config();
 5ca:	0e 94 b9 01 	call	0x372	; 0x372 <Timer0Config>
                g_Timer2_Flag.Overflow_Flag=0;
 5ce:	80 91 09 01 	lds	r24, 0x0109
 5d2:	8e 7f       	andi	r24, 0xFE	; 254
 5d4:	80 93 09 01 	sts	0x0109, r24
void Wiper_AutoMode(void)
{
    ADC_Config();
    Timer0Config();
    Timer2Config();
    while ((0==g_Ext_Int_Flag.flag_Int0)&&(0==g_Ext_Int_Flag.flag_Int1))
 5d8:	80 91 08 01 	lds	r24, 0x0108
 5dc:	81 70       	andi	r24, 0x01	; 1
 5de:	88 23       	and	r24, r24
 5e0:	29 f4       	brne	.+10     	; 0x5ec <Wiper_AutoMode+0x52>
 5e2:	80 91 08 01 	lds	r24, 0x0108
 5e6:	82 70       	andi	r24, 0x02	; 2
 5e8:	88 23       	and	r24, r24
 5ea:	11 f3       	breq	.-60     	; 0x5b0 <Wiper_AutoMode+0x16>
                Timer0Config();
                g_Timer2_Flag.Overflow_Flag=0;
            }

        }
        g_Ext_Int_Flag.flag_Int1=0;
 5ec:	80 91 08 01 	lds	r24, 0x0108
 5f0:	8d 7f       	andi	r24, 0xFD	; 253
 5f2:	80 93 08 01 	sts	0x0108, r24
        Stop();
 5f6:	0e 94 8f 00 	call	0x11e	; 0x11e <Stop>
        Stop_Timer0();
 5fa:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Stop_Timer0>
        Stop_Timer2();
 5fe:	0e 94 25 02 	call	0x44a	; 0x44a <Stop_Timer2>
}
 602:	cf 91       	pop	r28
 604:	df 91       	pop	r29
 606:	08 95       	ret

00000608 <Wiper_ManualMode>:
* Description: Implement the wiper manual mode functionality
* Arguments: None
* Returns: None
******************************************************************************/
void Wiper_ManualMode(void)
{
 608:	df 93       	push	r29
 60a:	cf 93       	push	r28
 60c:	cd b7       	in	r28, 0x3d	; 61
 60e:	de b7       	in	r29, 0x3e	; 62
    g_Update_ocr0a=g_DutyCycle[Medium_rain];
 610:	80 91 02 01 	lds	r24, 0x0102
 614:	80 93 0a 01 	sts	0x010A, r24
    Timer0Config();
 618:	0e 94 b9 01 	call	0x372	; 0x372 <Timer0Config>
    while((0==g_Ext_Int_Flag.flag_Int1) && (0==g_Ext_Int_Flag.flag_Int0));
 61c:	80 91 08 01 	lds	r24, 0x0108
 620:	82 70       	andi	r24, 0x02	; 2
 622:	88 23       	and	r24, r24
 624:	29 f4       	brne	.+10     	; 0x630 <Wiper_ManualMode+0x28>
 626:	80 91 08 01 	lds	r24, 0x0108
 62a:	81 70       	andi	r24, 0x01	; 1
 62c:	88 23       	and	r24, r24
 62e:	b1 f3       	breq	.-20     	; 0x61c <Wiper_ManualMode+0x14>
    g_Ext_Int_Flag.flag_Int1=0;
 630:	80 91 08 01 	lds	r24, 0x0108
 634:	8d 7f       	andi	r24, 0xFD	; 253
 636:	80 93 08 01 	sts	0x0108, r24
    Stop_Timer0();
 63a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Stop_Timer0>
}
 63e:	cf 91       	pop	r28
 640:	df 91       	pop	r29
 642:	08 95       	ret

00000644 <_exit>:
 644:	f8 94       	cli

00000646 <__stop_program>:
 646:	ff cf       	rjmp	.-2      	; 0x646 <__stop_program>
